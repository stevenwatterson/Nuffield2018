function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 03-Aug-2018 16:11:48


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Sex', 'Age', 'Nationality', 'Wheighkg', 'Hightcm', 'Hightinmeters', 'BMI', 'SystolicBP', 'DiastolicBP', 'Employmentstatus', 'Occupationstatus', 'FamilyHistoryofCancer', 'FamilyHistoryofHeartDiseaseorStroke', 'FamilyHistoryofDiabetes', 'FamilyHistoryofAlzheimersorParinsons', 'SmokingCurrent', 'AlcoholConsumption', 'IfCurrent2Daysmonth', 'IfCurrent2Unitweek', 'Exercise', 'ExerciseIfYesdaysweek', 'ExerciseIfYesmilesweek', 'LevelofFitness', 'Diet', 'Vegetarian', 'Vitaminsupplement', 'Hoursofsleep', 'CRPlevelsmgLTimepoint1', 'TACElevelsVenoussamplepgml', 'TACEsurfaceproteinlevelsajustedto5000ugmloftotalproteinsinpgml', 'TIMP3leveslabcampgml', 'TIMP3surfaceproteinlevelsajustedto5000ugmloftotalproteinsinpgml', 'sTNFR1TNFRSF1ApgmlRD', 'sTNFR2TNFRSF1BpgmlRD', 'sTNFR1sTNFR2ratio', 'sTNFR2sTNFR1ratio', 'GAPDH', 'NLRP3', 'TACE', 'DcTNLRP3GAPDH', 'DcTTACEGAPDH', 'DcTNLRP3', 'DcTTACE', 'DcTNLRP3100', 'DcTTACE100', 'DcTNLRP1', 'DcTTACE1', 'GAPDH_2', 'TIMP3', 'IL1B', 'DcTTIMP3GAPDH', 'DcTIL1BGAPDH', 'DcTIL1B', 'DcTTIMP3100', 'DcTIL1B100', 'IFNpgml', 'IL10pgml', 'IL12p70pgml', 'IL13pgml', 'IL1pgml', 'IL2pgml', 'IL4pgml', 'IL6pgml', 'IL8pgml', 'TNFpgml', 'TGmmolL', 'TotalcholesterolmmolL', 'HDLCmmolL', 'LDLCmmolL', 'ChHDLratio', 'HbgL', 'Hematocrite', 'RBCe12L', 'Plateletse9L', 'WBCe9L', 'CreatininumolL'};
predictors = inputTable(:, predictorNames);
response = inputTable.EUROSCORE;
isCategoricalPredictor = [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
    'MaxNumSplits', 30);
classificationEnsemble = fitcensemble(...
    predictors, ...
    response, ...
    'Method', 'RUSBoost', ...
    'NumLearningCycles', 100, ...
    'Learners', template, ...
    'LearnRate', 0.4, ...
    'ClassNames', categorical({'LR'; 'MR'; 'VHR'}));

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'Sex', 'Age', 'Nationality', 'Wheighkg', 'Hightcm', 'Hightinmeters', 'BMI', 'SystolicBP', 'DiastolicBP', 'Employmentstatus', 'Occupationstatus', 'FamilyHistoryofCancer', 'FamilyHistoryofHeartDiseaseorStroke', 'FamilyHistoryofDiabetes', 'FamilyHistoryofAlzheimersorParinsons', 'SmokingCurrent', 'AlcoholConsumption', 'IfCurrent2Daysmonth', 'IfCurrent2Unitweek', 'Exercise', 'ExerciseIfYesdaysweek', 'ExerciseIfYesmilesweek', 'LevelofFitness', 'Diet', 'Vegetarian', 'Vitaminsupplement', 'Hoursofsleep', 'CRPlevelsmgLTimepoint1', 'TACElevelsVenoussamplepgml', 'TACEsurfaceproteinlevelsajustedto5000ugmloftotalproteinsinpgml', 'TIMP3leveslabcampgml', 'TIMP3surfaceproteinlevelsajustedto5000ugmloftotalproteinsinpgml', 'sTNFR1TNFRSF1ApgmlRD', 'sTNFR2TNFRSF1BpgmlRD', 'sTNFR1sTNFR2ratio', 'sTNFR2sTNFR1ratio', 'GAPDH', 'NLRP3', 'TACE', 'DcTNLRP3GAPDH', 'DcTTACEGAPDH', 'DcTNLRP3', 'DcTTACE', 'DcTNLRP3100', 'DcTTACE100', 'DcTNLRP1', 'DcTTACE1', 'GAPDH_2', 'TIMP3', 'IL1B', 'DcTTIMP3GAPDH', 'DcTIL1BGAPDH', 'DcTIL1B', 'DcTTIMP3100', 'DcTIL1B100', 'IFNpgml', 'IL10pgml', 'IL12p70pgml', 'IL13pgml', 'IL1pgml', 'IL2pgml', 'IL4pgml', 'IL6pgml', 'IL8pgml', 'TNFpgml', 'TGmmolL', 'TotalcholesterolmmolL', 'HDLCmmolL', 'LDLCmmolL', 'ChHDLratio', 'HbgL', 'Hematocrite', 'RBCe12L', 'Plateletse9L', 'WBCe9L', 'CreatininumolL'};
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictorNames = {'Sex', 'Age', 'Nationality', 'Wheighkg', 'Hightcm', 'Hightinmeters', 'BMI', 'SystolicBP', 'DiastolicBP', 'Employmentstatus', 'Occupationstatus', 'FamilyHistoryofCancer', 'FamilyHistoryofHeartDiseaseorStroke', 'FamilyHistoryofDiabetes', 'FamilyHistoryofAlzheimersorParinsons', 'SmokingCurrent', 'AlcoholConsumption', 'IfCurrent2Daysmonth', 'IfCurrent2Unitweek', 'Exercise', 'ExerciseIfYesdaysweek', 'ExerciseIfYesmilesweek', 'LevelofFitness', 'Diet', 'Vegetarian', 'Vitaminsupplement', 'Hoursofsleep', 'CRPlevelsmgLTimepoint1', 'TACElevelsVenoussamplepgml', 'TACEsurfaceproteinlevelsajustedto5000ugmloftotalproteinsinpgml', 'TIMP3leveslabcampgml', 'TIMP3surfaceproteinlevelsajustedto5000ugmloftotalproteinsinpgml', 'sTNFR1TNFRSF1ApgmlRD', 'sTNFR2TNFRSF1BpgmlRD', 'sTNFR1sTNFR2ratio', 'sTNFR2sTNFR1ratio', 'GAPDH', 'NLRP3', 'TACE', 'DcTNLRP3GAPDH', 'DcTTACEGAPDH', 'DcTNLRP3', 'DcTTACE', 'DcTNLRP3100', 'DcTTACE100', 'DcTNLRP1', 'DcTTACE1', 'GAPDH_2', 'TIMP3', 'IL1B', 'DcTTIMP3GAPDH', 'DcTIL1BGAPDH', 'DcTIL1B', 'DcTTIMP3100', 'DcTIL1B100', 'IFNpgml', 'IL10pgml', 'IL12p70pgml', 'IL13pgml', 'IL1pgml', 'IL2pgml', 'IL4pgml', 'IL6pgml', 'IL8pgml', 'TNFpgml', 'TGmmolL', 'TotalcholesterolmmolL', 'HDLCmmolL', 'LDLCmmolL', 'ChHDLratio', 'HbgL', 'Hematocrite', 'RBCe12L', 'Plateletse9L', 'WBCe9L', 'CreatininumolL'};
predictors = inputTable(:, predictorNames);
response = inputTable.EUROSCORE;
isCategoricalPredictor = [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationEnsemble, 'KFold', 5);

% Compute validation predictions
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
